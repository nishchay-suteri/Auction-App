service:
    name: auction-service

plugins:
    - serverless-webpack
    - serverless-reqvalidator-plugin
    - serverless-aws-documentation
    - serverless-iam-roles-per-function

custom:
    documentation:
        api:
            info:
                version: v1.0.0
                title: Auction API
                description: Serverless Auction Application
        models:
            - name: CreateAuctionRequest
              contentType: application/json
              schema: ${file(src/utils/validators/create-auction-request.json)}
            - name: UpdateBidRequest
              contentType: application/json
              schema: ${file(src/utils/validators/update-bid-request.json)}

provider:
    name: aws
    runtime: nodejs12.x
    memorySize: 256
    stage: ${opt:stage, 'dev'}
    region: ${opt:region, 'us-east-1'}
    environment: # global environment variables - accessible to all lambda functions
        AUCTION_TABLE: AuctionTable-${self:provider.stage}
        AUCTION_STATUS_END_DATE_INDEX: statusAndEndDateIndex
        AUTH0_JWKS_URL: https://dev-h7sblwm7.us.auth0.com/.well-known/jwks.json
        MAIL_QUEUE_NAME: MailQueue-${self:provider.stage}

functions:
    createAuction:
        handler: src/lambda/http/createAuction.handler
        events:
            - http:
                  method: POST # post will also work
                  path: /auction
                  authorizer: Auth
                  cors: true
                  reqValidatorName: RequestBodyValidator
                  documentation:
                      summary: Create an Auction Item
                      description: Create an Auction Item
                      requestModels:
                          "application/json": CreateAuctionRequest
        iamRoleStatements:
            - ${file(iam/AuctionTableIAM.yml):AuctionTablePutItem}

    getAuctions:
        handler: src/lambda/http/getAuctions.handler
        events:
            - http:
                  method: get
                  path: /auctions
                  authorizer: Auth
                  cors: true
        iamRoleStatements:
            - ${file(iam/AuctionTableIAM.yml):AuctionTableQuery}

    getAuction:
        handler: src/lambda/http/getAuction.handler
        events:
            - http:
                  method: get # GET will also work
                  path: /auction/{auctionId}
                  authorizer: Auth
                  cors: true
        iamRoleStatements:
            - ${file(iam/AuctionTableIAM.yml):AuctionTableGetItem}
    placeBid:
        handler: src/lambda/http/placeBid.handler
        events:
            - http:
                  method: patch # PATCH (all Caps) will also work
                  path: /auction/{auctionId}/bid
                  authorizer: Auth
                  cors: true
                  reqValidatorName: RequestBodyValidator
                  documentation:
                      summary: Update a Bid in Auction Item
                      description: Update a Bid in Auction Item
                      requestModels:
                          "application/json": UpdateBidRequest
        iamRoleStatements:
            - ${file(iam/AuctionTableIAM.yml):AuctionTableGetItem}
            - ${file(iam/AuctionTableIAM.yml):AuctionTableUpdateItem}

    processAuctions:
        handler: src/lambda/schedule/processAuctions.handler
        # TODO: For testing, removing scheduling of function.. Uncomment this for production
        # events:
        #     - schedule: rate(1 minute)
        iamRoleStatements:
            - ${file(iam/AuctionTableIAM.yml):AuctionTableQuery}
            - ${file(iam/AuctionTableIAM.yml):AuctionTableUpdateItem}

    Auth:
        handler: src/lambda/auth/auth0Authorizer.handler

    sendMail:
        handler: src/lambda/ses/sendMail.handler
        events:
            - sqs:
                  arn: !GetAtt MailQueue.Arn
                  batchSize: 1 # 1 email at a time.. By default, uses 10
        iamRoleStatements:
            - ${file(iam/SendMailIAM.yml):SendMailIAM}

resources:
    # Now, since we are using AWS, the following syntax is particular to cloud formation syntax, NOT The Serverless Syntax
    Resources:
        AuctionTable: ${file(resources/AuctionTable.yml):AuctionTable}
        # Request Validator Resource
        RequestBodyValidator: ${file(resources/RequestBodyValidator.yml):RequestBodyValidator}
        # When request is denied from authorizer, gateway doesn't set proper cors headers to response. We need to add following resource for doing this
        GatewayResponseDefault4XX: ${file(resources/GatewayResponseDefault4XX.yml):GatewayResponseDefault4XX}
        # Mail Queue - SQS
        MailQueue: ${file(resources/MailQueue.yml):MailQueue}
