service:
    name: auction-service

plugins:
    - serverless-webpack
    - serverless-reqvalidator-plugin
    - serverless-aws-documentation
    - serverless-iam-roles-per-function

custom:
    documentation:
        api:
            info:
                version: v1.0.0
                title: Auction API
                description: Serverless Auction Application
        models:
            - name: CreateAuctionRequest
              contentType: application/json
              schema: ${file(src/utils/validators/create-auction-request.json)}
            - name: UpdateBidRequest
              contentType: application/json
              schema: ${file(src/utils/validators/update-bid-request.json)}

provider:
    name: aws
    runtime: nodejs12.x
    memorySize: 256
    stage: ${opt:stage, 'dev'}
    region: ${opt:region, 'us-east-1'}
    environment: # global environment variables - accessible to all lambda functions
        AUCTION_TABLE: AuctionTable-${self:provider.stage}

functions:
    createAuction:
        handler: src/lambda/http/createAuction.handler
        events:
            - http:
                  method: POST # post will also work
                  path: /auction
                  reqValidatorName: RequestBodyValidator
                  documentation:
                      summary: Create an Auction Item
                      description: Create an Auction Item
                      requestModels:
                          "application/json": CreateAuctionRequest
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - dynamodb:PutItem
              Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTION_TABLE}

    getAuctions:
        handler: src/lambda/http/getAuctions.handler
        events:
            - http:
                  method: get
                  path: /auctions
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - dynamodb:Scan
              Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTION_TABLE}

    getAuction:
        handler: src/lambda/http/getAuction.handler
        events:
            - http:
                  method: get # GET will also work
                  path: /auction/{auctionId}
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - dynamodb:GetItem
              Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTION_TABLE}
    placeBid:
        handler: src/lambda/http/placeBid.handler
        events:
            - http:
                  method: patch # PATCH (all Caps) will also work
                  path: /auction/{auctionId}/bid
                  reqValidatorName: RequestBodyValidator
                  documentation:
                      summary: Update a Bid in Auction Item
                      description: Update a Bid in Auction Item
                      requestModels:
                          "application/json": UpdateBidRequest
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
              Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTION_TABLE}

# TODO: Move the Resources,Iam Roles to separate Files to make this serverless.yml file more readable
resources:
    # Now, since we are using AWS, the following syntax is particular to cloud formation syntax, NOT The Serverless Syntax
    Resources:
        AuctionTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:provider.environment.AUCTION_TABLE}
                BillingMode: PAY_PER_REQUEST
                AttributeDefinitions: # Attributes that MUST BE in our table
                    - AttributeName: auctionId
                      AttributeType: S
                KeySchema: # Without Kwyschema, DynamoDB deployment won't work
                    - AttributeName: auctionId
                      KeyType: HASH # Hash means Partition key
        # Request Validator Resource
        RequestBodyValidator:
            Type: AWS::ApiGateway::RequestValidator
            Properties:
                Name: "request-body-validator"
                RestApiId:
                    Ref: ApiGatewayRestApi # Reference of the API Gateway build by serverless framework
                ValidateRequestBody: true
                ValidateRequestParameters: false
